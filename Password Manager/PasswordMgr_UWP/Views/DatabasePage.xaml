<Page
    x:Class="PasswordMgr_UWP.Views.DatabasePage"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:m="using:PasswordMgr_UWP.Models"
    xmlns:cm="using:PasswordMgr_UWP.Core.Models"
    xmlns:interactivity="using:Microsoft.Xaml.Interactivity"
    xmlns:core="using:Microsoft.Xaml.Interactions.Core"
    xmlns:controls="using:Microsoft.UI.Xaml.Controls"
    x:DefaultBindMode="OneWay"
    mc:Ignorable="d"
    Background="{ThemeResource ApplicationPageBackgroundThemeBrush}"
    SizeChanged="Page_SizeChanged">

    <Page.Resources>
        <m:TreeViewItemInvokedEventArgsToInvokedItemConverter x:Key="TreeViewItemInvokedEventArgsToInvokedItemConverter"/>
        <m:BoolToPasswordRevealModeConverter x:Key="BoolToPasswordRevealModeConverter"/>
        <m:InverseBoolConverter x:Key="InverseBoolConverter"/>
        <m:CheckForValueConverter x:Key="CheckForValueConverter"/>
        <m:CheckForDecryptedDatabaseConverter x:Key="CheckForDecryptedDatabaseConverter"/>

        <DataTemplate x:Key="DatabaseTemplate" x:DataType="cm:EncryptedDatabase">
            <TreeViewItem x:Name="databaseItem" IsExpanded="{x:Bind IsDecrypted}" ItemsSource="{x:Bind Passwords}">
                <StackPanel Orientation="Horizontal">
                    <FontIcon FontFamily="{StaticResource SymbolThemeFontFamily}" Glyph="&#xE785;" Visibility="{x:Bind IsDecrypted}"/>
                    <FontIcon FontFamily="{StaticResource SymbolThemeFontFamily}" Glyph="&#xE72E;" Visibility="{x:Bind IsEncrypted}"/>
                    <TextBlock Text="{x:Bind Name}" Margin="10,0"/>
                </StackPanel>
            </TreeViewItem>
        </DataTemplate>

        <DataTemplate x:Key="PasswordTemplate" x:DataType="cm:EncryptedPassword">
            <TreeViewItem>
                <StackPanel Orientation="Horizontal" Spacing="10">
                    <SymbolIcon Symbol="Permissions"/>
                    <TextBlock Text="{x:Bind Name}"/>
                </StackPanel>
            </TreeViewItem>
        </DataTemplate>

        <m:DatabaseItemTemplateSelector x:Key="DatabaseItemTemplateSelector"
                                        DatabaseTemplate="{StaticResource DatabaseTemplate}"
                                        PasswordTemplate="{StaticResource PasswordTemplate}"/>
    </Page.Resources>

    <Grid x:Name="ContentArea">

        <Grid.RowDefinitions>
            <RowDefinition/>
            <RowDefinition/>
        </Grid.RowDefinitions>

        <Grid.ColumnDefinitions>
            <ColumnDefinition/>
            <ColumnDefinition Width="2.5*"/>
        </Grid.ColumnDefinitions>

        <VisualStateManager.VisualStateGroups>
            <VisualStateGroup x:Name="managerPageVisualGroup">
                <VisualState x:Name="normalWindow">
                    <VisualState.StateTriggers>
                        <AdaptiveTrigger MinWindowWidth="1120"/>
                    </VisualState.StateTriggers>
                    <VisualState.Setters>

                        <Setter Target="dataSpace.(Grid.Row)" Value="0"/>
                        <Setter Target="dataSpace.(Grid.Column)" Value="1"/>

                        <Setter Target="treeSpace.(Grid.ColumnSpan)" Value="1"/>
                        <Setter Target="dataSpace.(Grid.ColumnSpan)" Value="1"/>

                        <Setter Target="treeSpace.(Grid.RowSpan)" Value="2"/>
                        <Setter Target="dataSpace.(Grid.RowSpan)" Value="2"/>

                        <Setter Target="dataSpace.VerticalAlignment" Value="Top"/>
                    </VisualState.Setters>
                </VisualState>

                <VisualState x:Name="smallWindow">
                    <VisualState.StateTriggers>
                        <AdaptiveTrigger MinWindowWidth="0"/>
                    </VisualState.StateTriggers>
                    <VisualState.Setters>
                        <Setter Target="dataSpace.(Grid.Row)" Value="1"/>
                        <Setter Target="dataSpace.(Grid.Column)" Value="0"/>

                        <Setter Target="treeSpace.(Grid.ColumnSpan)" Value="2"/>
                        <Setter Target="dataSpace.(Grid.ColumnSpan)" Value="2"/>

                        <Setter Target="treeSpace.(Grid.RowSpan)" Value="1"/>
                        <Setter Target="dataSpace.(Grid.RowSpan)" Value="1"/>

                        <Setter Target="dataSpace.Margin" Value="5"/>
                        <Setter Target="treeSpace.Margin" Value="0"/>

                        <Setter Target="dataSpace.VerticalAlignment" Value="Bottom"/>
                    </VisualState.Setters>
                </VisualState>
            </VisualStateGroup>
        </VisualStateManager.VisualStateGroups>

        <Grid x:Name="treeSpace"
              Margin="0,-2,24,0"
              Background="{ThemeResource SystemControlAcrylicWindowBrush}"
              CornerRadius="0,5,5,0">

            <Grid.RowDefinitions>
                <RowDefinition/>
                <RowDefinition Height="auto"/>
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto"></ColumnDefinition>
                <ColumnDefinition Width="*"></ColumnDefinition>
            </Grid.ColumnDefinitions>

            <ScrollViewer Grid.Column="1" VerticalScrollBarVisibility="Auto" HorizontalScrollBarVisibility="Auto">
                <TreeView ItemsSource="{x:Bind ViewModel.Databases}"
                          ItemTemplateSelector="{StaticResource DatabaseItemTemplateSelector}"
                          IsDoubleTapEnabled="{x:Bind ViewModel.SelectedIsDatabase}"
                          CanDrag="False"
                          CanDragItems="False"
                          CanReorderItems="False">
                    <interactivity:Interaction.Behaviors>
                        <core:EventTriggerBehavior EventName="ItemInvoked">
                            <core:InvokeCommandAction Command="{x:Bind ViewModel.SetSelectedCommand}"
                                                      InputConverter="{StaticResource TreeViewItemInvokedEventArgsToInvokedItemConverter}" />
                        </core:EventTriggerBehavior>
                        <core:EventTriggerBehavior EventName="DoubleTapped">
                            <core:InvokeCommandAction Command="{x:Bind ViewModel.DecryptDatabaseCommand}" />
                        </core:EventTriggerBehavior>
                    </interactivity:Interaction.Behaviors>
                </TreeView>
            </ScrollViewer>

            <Frame Grid.RowSpan="2" Background="{ThemeResource SystemControlAcrylicWindowMediumHighBrush}">
                <ScrollViewer>
                    <StackPanel Orientation="Vertical"
                                HorizontalAlignment="Center"
                                VerticalAlignment="Bottom"
                                Spacing="5"
                                Margin="10">

                        <Button Style="{ThemeResource AccentButtonStyle}"
                                Command="{x:Bind ViewModel.NewDatabaseCommand}"
                                x:Uid="/UIResources/newDatabaseBtn">
                            <SymbolIcon Symbol="Add" />
                        </Button>

                        <Button x:Name="key" Style="{ThemeResource AccentButtonStyle}"
                                Command="{x:Bind ViewModel.NewPasswordCommand}"
                                IsEnabled="{x:Bind ViewModel.Selected, Converter={StaticResource CheckForDecryptedDatabaseConverter}, FallbackValue=false}"
                                x:Uid="/UIResources/newPasswordBtn">
                            <SymbolIcon Symbol="Permissions" />
                        </Button>

                        <Button Style="{ThemeResource AccentButtonStyle}"
                                Command="{x:Bind ViewModel.DecryptDatabaseCommand}"
                                IsEnabled="{x:Bind ViewModel.Selected.IsDecryptButtonEnabled, FallbackValue=false}"
                                x:Uid="/UIResources/decryptBtn">
                            <FontIcon FontFamily="{StaticResource SymbolThemeFontFamily}" Glyph="&#xE785;" />
                        </Button>

                        <Button Style="{ThemeResource AccentButtonStyle}"
                                Command="{x:Bind ViewModel.EncryptButtonCommand}"
                                IsEnabled="{x:Bind key.IsEnabled}"
                                x:Uid="/UIResources/encryptBtn">
                            <FontIcon FontFamily="{StaticResource SymbolThemeFontFamily}" Glyph="&#xE72E;" />
                        </Button>

                        <Button Command="{x:Bind ViewModel.DeleteCommand}"
                                IsEnabled="{x:Bind ViewModel.Selected, Converter={StaticResource CheckForValueConverter}}"
                                x:Uid="/UIResources/deleteBtn">
                            <SymbolIcon Symbol="Delete" />
                        </Button>

                        <Button Command="{x:Bind ViewModel.ExportDatabaseCommand}"
                                IsEnabled="{x:Bind ViewModel.SelectedIsDatabase}"
                                x:Uid="/UIResources/exportDatabase">
                            <SymbolIcon Symbol="SaveLocal" />
                        </Button>

                        <Button Command="{x:Bind ViewModel.ExportAllDatabasesCommand}"
                                IsEnabled="{x:Bind ViewModel.ListIsNotEmpty}"
                                x:Uid="/UIResources/exportDatabases">
                            <FontIcon FontFamily="{StaticResource SymbolThemeFontFamily}" Glyph="&#xEA35;" />
                        </Button>
                    </StackPanel>
                </ScrollViewer>

            </Frame>
        </Grid>

        <ScrollViewer x:Name="dataSpace"
                      VerticalScrollBarVisibility="Auto"
                      Grid.Column="1"
                      Margin="{StaticResource MediumRightMargin}"
                      Background="{ThemeResource ApplicationPageBackgroundThemeBrush}">
            <StackPanel Spacing="15">
                <TextBlock x:Uid="/UIResources/savedPasswords" FontSize="30" TextWrapping="WrapWholeWords"/>

                <Frame CornerRadius="5"
                       BorderThickness="8"
                       BorderBrush="{ThemeResource AppBarItemPointerOverBackgroundThemeBrush}"
                       Background="{ThemeResource SystemControlAcrylicElementBrush}">

                    <StackPanel Spacing="10"
                            Margin="5"
                            CornerRadius="5"
                            Background="{ThemeResource SystemControlAcrylicElementBrush}">

                        <TextBox x:Uid="/UIResources/name"
                                 Text="{x:Bind ViewModel.Name, Mode=TwoWay}"
                                 IsReadOnly="{x:Bind (x:Boolean)editBtn.IsChecked, Converter={StaticResource InverseBoolConverter}}"/>

                        <TextBox x:Uid="/UIResources/info"
                                 Text="{x:Bind ViewModel.Info, Mode=TwoWay}"
                                 IsReadOnly="{x:Bind (x:Boolean)editBtn.IsChecked, Converter={StaticResource InverseBoolConverter}}"/>

                        <PasswordBox Name="password" x:Uid="/UIResources/password"
                                     Password="{x:Bind ViewModel.PlaintextPassword, Mode=TwoWay}"
                                     PasswordRevealMode="{x:Bind showBtn.IsChecked, Converter={StaticResource BoolToPasswordRevealModeConverter}}"
                                     AllowFocusOnInteraction="{x:Bind (x:Boolean)editBtn.IsChecked}"/>

                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition/>
                                <ColumnDefinition/>
                            </Grid.ColumnDefinitions>

                            <StackPanel Orientation="Horizontal"
                                        Spacing="10"
                                        Margin="2">
                                <Button Style="{ThemeResource AccentButtonStyle}" Visibility="Collapsed">
                                    <SymbolIcon Symbol="Save"/>
                                </Button>

                                <Button Command="{x:Bind ViewModel.CopyCommand}"
                                CommandParameter="{x:Bind password.Password}"
                                x:Uid="/UIResources/copySymbolBtn">
                                    <SymbolIcon Symbol="Copy"/>
                                </Button>

                                <ToggleButton Name="showBtn"
                                      x:Uid="/UIResources/showBtn">
                                    <FontIcon FontFamily="{StaticResource SymbolThemeFontFamily}" Glyph="&#xE7B3;"/>
                                </ToggleButton>
                            </StackPanel>

                            <StackPanel Orientation="Horizontal"
                                        Spacing="10"
                                        HorizontalAlignment="Right"
                                        Grid.Column="1">

                                <Button x:Uid="/UIResources/saveBtn"
                                        Visibility="{x:Bind editBtn.IsChecked}"
                                        IsEnabled="{x:Bind ViewModel.Selected.IsDecrypted, FallbackValue=false}"
                                        Style="{ThemeResource AccentButtonStyle}"
                                        Command="{x:Bind ViewModel.SaveCommand}">
                                    <SymbolIcon Symbol="Save"/>
                                </Button>

                                <ToggleButton x:Name="editBtn"
                                              x:Uid="/UIResources/editBtn"
                                              IsEnabled="{x:Bind ViewModel.Selected.IsDecrypted, FallbackValue=false}"
                                              IsChecked="{x:Bind ViewModel.EditChecked}">
                                    <SymbolIcon Symbol="Edit"/>
                                </ToggleButton>
                            </StackPanel>
                        </Grid>
                    </StackPanel>
                </Frame>
                <controls:InfoBar x:Uid="/UIResources/infosChangedBar" Severity="Success" IsOpen="{x:Bind ViewModel.InfosChangedBarVisibility}"/>
            </StackPanel>
        </ScrollViewer>
    </Grid>
</Page>
